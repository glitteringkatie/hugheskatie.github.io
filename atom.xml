<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Katie Hughes</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hugheskatie.github.io/"/>
  <updated>2017-08-25T04:08:32.000Z</updated>
  <id>http://hugheskatie.github.io/</id>
  
  <author>
    <name>Katie Hughes</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Learn You a Hask/Elm for Great JavaScript</title>
    <link href="http://hugheskatie.github.io/2017/08/24/Learn-You-a-Hask-Elm-for-Great-JavaScript/"/>
    <id>http://hugheskatie.github.io/2017/08/24/Learn-You-a-Hask-Elm-for-Great-JavaScript/</id>
    <published>2017-08-25T03:54:15.000Z</published>
    <updated>2017-08-25T04:08:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><a style="background-color:#585858;color:white;text-decoration:none;padding:4px 6px;font-size:12px;line-height:1.2;display:inline-block;border-radius:3px;" href="https://unsplash.com/@roman_lazygeek?utm_medium=referral&amp;utm_campaign=photographer-credit&amp;utm_content=creditBadge" target="_blank" rel="noopener noreferrer" title="Download free do whatever you want high-resolution photos from Roman Mager"><span style="display:inline-block;padding:2px 3px;"><svg xmlns="http://www.w3.org/2000/svg" style="height:12px;width:auto;position:relative;vertical-align:middle;top:-1px;fill:white;" viewbox="0 0 32 32"><title/><path d="M20.8 18.1c0 2.7-2.2 4.8-4.8 4.8s-4.8-2.1-4.8-4.8c0-2.7 2.2-4.8 4.8-4.8 2.7.1 4.8 2.2 4.8 4.8zm11.2-7.4v14.9c0 2.3-1.9 4.3-4.3 4.3h-23.4c-2.4 0-4.3-1.9-4.3-4.3v-15c0-2.3 1.9-4.3 4.3-4.3h3.7l.8-2.3c.4-1.1 1.7-2 2.9-2h8.6c1.2 0 2.5.9 2.9 2l.8 2.4h3.7c2.4 0 4.3 1.9 4.3 4.3zm-8.6 7.5c0-4.1-3.3-7.5-7.5-7.5-4.1 0-7.5 3.4-7.5 7.5s3.3 7.5 7.5 7.5c4.2-.1 7.5-3.4 7.5-7.5z"/></svg></span><span style="display:inline-block;padding:2px 3px;">Photo by Roman Mager</span></a></p>
<p>Programming Language Fundamentals in college introduced me to <a href="https://www.haskell.org/" target="_blank" rel="external">Haskell</a> and I was hooked. It was my first taste at the functional paradigm and everything I did felt like solving a riddle. Haskell made me feel clever and while programming shouldn’t be <em>all</em> solving riddles, it is sure fun to feel clever. I gushed about Haskell to a friend who knew I liked frontend development and he suggested <a href="http://elm-lang.org/" target="_blank" rel="external">Elm</a>. I looked that up real quick and then had a hard time paying attention in my Haskell class because I was having a blast with Elm.</p>
<p>Eventually I graduated and started working at AppNexus and for my goals at work I focused on Elm for a quarter and read <a href="http://learnyouahaskell.com/" target="_blank" rel="external">Learn You a Haskell for Great Good</a> for a quarter—both to better learn functional programming. But let’s be honest it was to scratch this itch I had for these languages. Or at least that’s how it started. Unbeknownst to me I was learning Haskell and Elm for great JavaScript.</p>
<p>At my job we use <a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a> and <a href="http://redux.js.org/" target="_blank" rel="external">Redux</a>—when I first started learning Redux I had a really hard time primarily because of the language around it. Wtf were reducers and dispatchers and why were actions not taking action? The names didn’t make sense to me and didn’t hold meaning to me so I had a rough time trying to keep it all straight in my head. Learning Elm was really valuable here because Redux’s architecture was inspired by Elm’s architecture. Redux has <code>actions</code> that get sent to <code>reducers</code> that change your app’s <code>state</code>; Elm has <code>messages</code> that get sent to <code>updates</code> that change your app’s <code>model</code>. Learning this pattern with the (natural) language that Elm had as opposed to Redux’s helped me immensely. I could understand what a <code>message</code> was and wasn’t confused why it wasn’t taking action. <code>Update</code> is a word I use in my personal lexicon far more than <code>reduce</code>. To be fair, <code>state</code> and <code>model</code> were pretty 50/50 for me.</p>
<p>Going through Learn you a Haskell actually helped me get to know lodash better. As I learned more about the core Haskell library functions I would check out lodash and try to figure out its equivalent. Sometimes I would even pseudo javascript out the lesson I had to do in Haskell to try on different hats while learning. For example, Haskell helped lodash’s reduce really click. I had a hard time remembering that function and why to use it but then when I was doing a lesson involving folding, I realized “Hey, this is just reduce!” This is another example where word choice affected my understanding—“folding” makes me think of when you lightly mix things in cooking so I had that visual cue to remember what it was called whereas <code>reduce</code> doesn’t really give me that memory cue.</p>
<p>And then just in general, working through Elm and Haskell helped me be more conscious in JavaScript. Since both languages are pretty minimal on parentheses, I started focusing more on readability and noting what I liked, what I didn’t like, and what seemed the most clear. I was more conscious about side effects and how we could keep functions as pure as possible. Type systems became even more my jam than they were before. And finally I just learned how to think functionally and how to keep those functional tools within reach so they could be part of muscle memory.</p>
<p>Part way through this I did stop and start wondering what I’m even doing and why. It’s not like I’m writing Haskell day to day. I wrote a scrabblizer that takes a message and translates it to the scrabble emoji code for slack but that’s about it. But then I just reminded myself that 1) I’m doing it because I just genuinely think these languages are fun and 2) they are teaching me lessons I can take elsewhere.</p>
<p>Now I’m not saying YOU should go out and learn Haskell and Elm for great Javascript. Learn the languages you want to learn—lessons are agnostic of language and sometimes the words behind things click better for some people over others. If you’re studying some weird language, think about the patterns you are using and how their word choice could be better or how it is helping you learn better. It’s really interesting thinking about what languages have baked in and how that changes how you approach and understand problems.</p>
]]></content>
    
    <summary type="html">
    
      How Haskell and Elm helped my day-to-day JavaScript
    
    </summary>
    
    
      <category term="haskell" scheme="http://hugheskatie.github.io/tags/haskell/"/>
    
      <category term="elm" scheme="http://hugheskatie.github.io/tags/elm/"/>
    
      <category term="functional programming" scheme="http://hugheskatie.github.io/tags/functional-programming/"/>
    
  </entry>
  
  <entry>
    <title>listsaredumb pt 1</title>
    <link href="http://hugheskatie.github.io/2017/08/12/listsaredumb+pt+1/"/>
    <id>http://hugheskatie.github.io/2017/08/12/listsaredumb+pt+1/</id>
    <published>2017-08-13T06:56:54.000Z</published>
    <updated>2017-08-25T03:55:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><a style="background-color:#585858;color:white;text-decoration:none;padding:4px 6px;font-size:12px;line-height:1.2;display:inline-block;border-radius:3px;" href="https://unsplash.com/@j_miller?utm_medium=referral&amp;utm_campaign=photographer-credit&amp;utm_content=creditBadge" target="_blank" rel="noopener noreferrer" title="Download free do whatever you want high-resolution photos from Jaie Miller"><span style="display:inline-block;padding:2px 3px;"><svg xmlns="http://www.w3.org/2000/svg" style="height:12px;width:auto;position:relative;vertical-align:middle;top:-1px;fill:white;" viewbox="0 0 32 32"><title/><path d="M20.8 18.1c0 2.7-2.2 4.8-4.8 4.8s-4.8-2.1-4.8-4.8c0-2.7 2.2-4.8 4.8-4.8 2.7.1 4.8 2.2 4.8 4.8zm11.2-7.4v14.9c0 2.3-1.9 4.3-4.3 4.3h-23.4c-2.4 0-4.3-1.9-4.3-4.3v-15c0-2.3 1.9-4.3 4.3-4.3h3.7l.8-2.3c.4-1.1 1.7-2 2.9-2h8.6c1.2 0 2.5.9 2.9 2l.8 2.4h3.7c2.4 0 4.3 1.9 4.3 4.3zm-8.6 7.5c0-4.1-3.3-7.5-7.5-7.5-4.1 0-7.5 3.4-7.5 7.5s3.3 7.5 7.5 7.5c4.2-.1 7.5-3.4 7.5-7.5z"/></svg></span><span style="display:inline-block;padding:2px 3px;">Photo by Jaie Miller</span></a></p>
<p>I’ve become increasingly interested in making really dumb and useless projects, maybe even things that might get people annoyed at their existence. This is mostly because I always feel pressure that projects I work on should provide some value and then I get hung up on <em>what</em> to make and rarely make things because I think they should all be Good™. Recently a list of JavaScript Influencers came out which resulted in some conversation and ultimately this tweet that inspired my inner shit poster:<br><div class="twitter-wrapper"><blockquote class="twitter-tweet"><a href="https://twitter.com/sarah_edo/status/896025355764457472" target="_blank" rel="external"></a></blockquote></div><script async defer src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>
<p>In my quest to embrace Bad™ and get to learning/practicing a lot faster, I immediately started thinking about what listsaredumb.com could be. This vision involves me taking the standard TODO app and making it utterly useless. The features that nobody asked for will probably be the following:</p>
<ul>
<li>Randomly insert in todo items using mashed words associated with the intended todo item</li>
<li>Randomly delete or complete items</li>
<li>Show items in a non-linear format (scattered)</li>
</ul>
<p>Since the point in my pointless app is to get to learning something faster, I chose to use this as an excuse to learn <a href="https://reasonml.github.io/reason-react/" target="_blank" rel="external">ReasonReact</a>. I’ve been wanting to play with it since I went to React Conf and saw <a href="https://www.youtube.com/watch?v=_0T5OSSzxms" target="_blank" rel="external">Cheng Lou’s talk</a> but just haven’t made the time. The nice thing is that the <a href="https://github.com/chenglou/reason-react-example" target="_blank" rel="external">ReasonReact example repo</a> had a todo app already included. My first step was to get over the fact that I always think I need to start from point 0 and create everything myself. The second step, ironically, was making my todo list so I could calm down (context: this was when literal Nazis were terrorizing Virginia). Third step was a face mask.</p>
<p>Once I actually got into the code, I figured that the function responsible for saving each of these todos must have the word “save” around it somewhere. I searched for just that and used my best detective skills 🕵🏼‍♀️ to figure out I probably want to be focusing on <code>handleNewTodoKeyDownEvent</code>. Great. There was some weird syntax around state that I guessed was setting it?? I have yet to look up the at symbol in Reason tbh.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let todos =</div><div class="line">    state.todos @ [</div><div class="line">        &#123;id: string_of_float (Js.Date.now ()), title: nonEmptyValue, completed: false&#125;</div><div class="line">    ];</div></pre></td></tr></table></figure>
<p>So initially I just copied the object that looked like it was being pushed (added? inserted? idk) onto the <code>todos</code> array in state and made another one where title was just “cats” because that’s my go to sample data.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let todos =</div><div class="line">    state.todos @ [</div><div class="line">        &#123;id: string_of_float (Js.Date.now ()), title: nonEmptyValue, completed: false&#125;,</div><div class="line">        &#123;id: string_of_float (Js.Date.now ()), title: “cats&quot;, completed: false&#125;</div><div class="line">    ];</div></pre></td></tr></table></figure>
<p>I booted up the app and added a todo item expecting the item to show up in my list as well as a task just saying “cats”. This did not happen. “cats” was no where to be seen. I did notice that in the corner the item count read as 2 but I was only seeing 1 item. I added a few more items and the pattern continued: I only saw half of what the item count showed. My hypothesis was that something must be working with the IDs and since they were both being made within the same tick, <code>Js.Date.now ()</code> was probably not a unique-enough ID anymore. I hardcoded one ID to “3” because 🤷🏼‍♀️ and was able to see the “cats” pile up.</p>
<p>Enter: my first rabbit hole. I initially tried just adding 1 to the date. That didn’t work. The compiler complained about the types being added. For some reason instead of just looking up float addition (<code>+.</code>, by the way) I decided to write up this whole recursive thing that checked for key existence and either used the current date or tried it all again but with date + 0.1. Again: hit the type issue. I finally looked up float addition and fixed that. Still no luck. After too long I realized because the recursive function was looking at the <em>saved</em> todos, the pending todo ID I just created and wanted to also be checked was not being included. My trial and error process continued, which included trying to write a recursive function with optional parameters without realizing what I was doing, finding <a href="https://github.com/reasonml/BetterErrors" target="_blank" rel="external">BadErrors</a> since the output/error is pretty unhelpful (this made it marginally less shitty), installing <a href="https://github.com/reasonml-editor/vscode-reasonml" target="_blank" rel="external">the appropriate plugin for vscode</a>, and stream-of-conciousness texting my friend throughout this whole process.</p>
<p>I stepped back at this point, said yolo, and then just concatenated “2” onto the end of the string ID. Recompiled, everything went well, pulled up the app, added a todo item, and there it was: “cats” after every item I added. Hallelujah.</p>
<p>My next task was to add “cats” at a random chance. At first I figured I could set the array to a variable above and then conditionally add the second item in. This didn’t work for some reason? I still need to look up that @ sign. There was some weird syntax highlighting happening and bad errors so I put the array back how it was and then just used <code>Random.int</code> with a cap of 3 and a ternary to change how state would be altered.</p>
<pre><code>let todos = Random.int 3 != 0
    ? state.todos @ [
        {id: string_of_float (Js.Date.now ()), title: nonEmptyValue, completed: false},
        {id: string_of_float (Js.Date.now ()) ^ &quot;2&quot;, title: &quot;cats&quot;, completed: false}
    ]
    : state.todos @ [
        {id: string_of_float (Js.Date.now ()), title: nonEmptyValue, completed: false}
    ];
</code></pre><p>This… actually worked. Now I had cats appearing 66% of the time. I like those odds (also I miss my cat—-his grandparents are currently catsitting but I see him in 5 days). The only task I had left for the night was figuring out what API I wanted to use. I searched a little bit and found <a href="https://www.twinword.com/api/word-associations.php" target="_blank" rel="external">Twinword Word Associations</a> which is a freemium model and essentially looked like what I wanted. I felt like that was a good place to stop for the night and get to reading Watchmen, and by “reading Watchmen” I mean accidentally writing this post instead.</p>
<p>So what do I expect to happen in the next episodes of this project? Pay for api, talk to api, randomly delete todos, randomly complete todos, redesign, Mom!? argument, police, fleeing the scene, hiding in a dumpster, crashing on your couch for a week because</p>
<p><img src="https://uproxx.files.wordpress.com/2015/06/j-ralph-homeless.gif?w=650" alt="image"></p>
<p>Disclaimer: This may or may not have all been done with Parks and Rec playing in the background.</p>
]]></content>
    
    <summary type="html">
    
      My first dive into Reason through a project in absurdism
    
    </summary>
    
    
      <category term="functional programming" scheme="http://hugheskatie.github.io/tags/functional-programming/"/>
    
      <category term="reason" scheme="http://hugheskatie.github.io/tags/reason/"/>
    
      <category term="useless projects" scheme="http://hugheskatie.github.io/tags/useless-projects/"/>
    
  </entry>
  
</feed>
